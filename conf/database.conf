# common database config
ebean.default="models.*"

# Database configuration
db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost:3306/ruckus"
db.default.url=${?DB_DEFAULT_URL}
db.default.user=ruckus
db.default.user=${?DB_DEFAULT_USER}
db.default.password=ruckus
db.default.password=${?DB_DEFAULT_PASSWORD}

# Set a connection's default autocommit setting
#db.default.autocommit=true

# Set a connection's default isolation level
#db.default.isolation=READ_COMMITTED

# In order to reduce lock contention and thus improve performance,
# each incoming connection request picks off a connection from a
# pool that has thread-affinity.
# The higher this number, the better your performance will be for the
# case when you have plenty of short-lived threads.
# Beyond a certain threshold, maintenance of these pools will start
# to have a negative effect on performance (and only for the case
# when connections on a partition start running out).
db.default.partitionCount=6
db.default.partitionCount=${?DB_PARTITION_COUNT}

# The number of connections to create per partition. Setting this to
# 5 with 3 partitions means you will have 15 unique connections to the
# database. Note that BoneCP will not create all these connections in
# one go but rather start off with minConnectionsPerPartition and
# gradually increase connections as required.
db.default.maxConnectionsPerPartition=5
db.default.maxConnectionsPerPartition=${?DB_MAX_CONN_PER_PARTION}

# The number of initial connections, per partition.
db.default.minConnectionsPerPartition=3
db.default.minConnectionsPerPartition=${?DB_MIN_CONN_PER_PARTION}

# When the available connections are about to run out, BoneCP will
# dynamically create new ones in batches. This property controls
# how many new connections to create in one go (up to a maximum of
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.acquireIncrement=2
db.default.acquireIncrement=${?DB_ACQUIRE_INCREMENT}

# After attempting to acquire a connection and failing, try to
# connect this number of times before giving up.
#db.default.acquireRetryAttempts=10
#db.default.acquireRetryAttempts=${?DB_ACQUIRE_RETRY_ATTEMPTS}

# How long to wait before attempting to obtain a
# connection again after a failure.
#db.default.acquireRetryDelay=5 seconds

# The maximum time to wait before a call
# to getConnection is timed out.
#db.default.connectionTimeout=1 second

# Idle max age
#db.default.idleMaxAge=10 minute

# This sets the time for a connection to remain idle before sending a test query to the DB.
# This is useful to prevent a DB from timing out connections on its end.
#db.default.idleConnectionTestPeriod=5 minutes

# An initial SQL statement that is run only when
# a connection is first created.
#db.default.initSQL="SELECT 1"

# If enabled, log SQL statements being executed.
#db.default.logStatements=false

# The maximum connection age.
#db.default.maxConnectionAge=1 hour

# The maximum query execution time. Queries slower than this will be logged as a warning.
#db.queryExecuteTimeLimit=1 second