package managers.filters;

import service.ContestFilterService;
import com.avaje.ebean.Ebean;
import com.fasterxml.jackson.core.JsonProcessingException;
import models.contest.*;
import models.sports.League;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import utilities.BaseTest;

import java.util.List;

import static org.junit.Assert.assertTrue;

/**
 * Created by dan on 6/3/14.
 */
public class ContestFilterManagerTest extends BaseTest {
    private ContestFilterService contestFilterManager;

    @Before
    public void setUp() {
        contestFilterManager = new ContestFilterService();
    }

    @After
    public void tearDown() {
        contestFilterManager = null;
    }

    @Test
    public void testGenerateFilters() throws JsonProcessingException {
        deleteAutoGeneratedContestFilterData();

        League.MLB.setActive(true);
        Ebean.save(League.MLB);

        /*
         * Filter settings for NFL.
         */
        ContestEntryFee contestEntryFee = new ContestEntryFee(League.NFL, 100);
        Ebean.save(contestEntryFee);

        ContestNumberOfUsers contestNumberOfUsers = new ContestNumberOfUsers(League.NFL, 2, 2);
        Ebean.save(contestNumberOfUsers);

        ContestGrouping contestGrouping = new ContestGrouping("ALL", League.NFL);
        Ebean.save(contestGrouping);

        ContestSalary contestSalary = new ContestSalary(League.NFL, 60000);
        Ebean.save(contestSalary);

        /*
         * Filter settings for MLB.
         */
        ContestEntryFee contestEntryFeeMLB = new ContestEntryFee(League.MLB, 200);
        Ebean.save(contestEntryFeeMLB);

        ContestNumberOfUsers contestNumberOfUsersMLB = new ContestNumberOfUsers(League.MLB, 0, 1000);
        Ebean.save(contestNumberOfUsersMLB);

        ContestGrouping contestGroupingMLB = new ContestGrouping("EARLY", League.MLB);
        Ebean.save(contestGroupingMLB);

        ContestSalary contestSalaryMLB = new ContestSalary(League.MLB, 50000);
        Ebean.save(contestSalaryMLB);

        List<ContestFilter> contestFilters = contestFilterManager.generateFilters();
        assertTrue(contestFilters.size() == 3);

        ContestFilter filter = contestFilters.get(0);
        assertTrue(filter.getEntryFee().size() == 2 && filter.getEntryFee().get(0) == 100 && filter.getEntryFee().get(1) == 200);
        assertTrue(filter.getGrouping().size() == 2 && filter.getGrouping().get(0).getName().equals("EARLY") && filter.getGrouping().get(1).getName().equals("ALL"));
        assertTrue(filter.getNumPlayers().size() == 2
                && filter.getNumPlayers().get(0).getMinimum() == 0 && filter.getNumPlayers().get(0).getMaximum() == 1000
                && filter.getNumPlayers().get(1).getMinimum() == 2 && filter.getNumPlayers().get(1).getMaximum() == 2);
        assertTrue(filter.getSalaryCap().size() == 2 && filter.getSalaryCap().get(0) == 50000 && filter.getSalaryCap().get(1) == 60000);
        assertTrue(filter.getName().equals(ContestFilter.FILTER_TYPE_ALL));

        filter = contestFilters.get(1);
        assertTrue(filter.getEntryFee().size() == 1 && filter.getEntryFee().get(0) == 200);
        assertTrue(filter.getGrouping().size() == 1 && filter.getGrouping().get(0).getName().equals("EARLY"));
        assertTrue(filter.getNumPlayers().size() == 1 && filter.getNumPlayers().get(0).getMinimum() == 0 && filter.getNumPlayers().get(0).getMaximum() == 1000);
        assertTrue(filter.getSalaryCap().size() == 1 && filter.getSalaryCap().get(0) == 50000);
        assertTrue(filter.getName().equals("MLB"));

        filter = contestFilters.get(2);
        assertTrue(filter.getEntryFee().size() == 1 && filter.getEntryFee().get(0) == 100);
        assertTrue(filter.getGrouping().size() == 1 && filter.getGrouping().get(0).getName().equals("ALL"));
        assertTrue(filter.getNumPlayers().size() == 1 && filter.getNumPlayers().get(0).getMinimum() == 2 && filter.getNumPlayers().get(0).getMaximum() == 2);
        assertTrue(filter.getSalaryCap().size() == 1 && filter.getSalaryCap().get(0) == 60000);
        assertTrue(filter.getName().equals("NFL"));
    }

    @Test
    public void testGenerateFilters_MLBDisabled() throws JsonProcessingException {
        deleteAutoGeneratedContestFilterData();

        /*
         * Filter settings for NFL.
         */
        ContestEntryFee contestEntryFee = new ContestEntryFee(League.NFL, 100);
        Ebean.save(contestEntryFee);

        ContestNumberOfUsers contestNumberOfUsers = new ContestNumberOfUsers(League.NFL, 2, 2);
        Ebean.save(contestNumberOfUsers);

        ContestGrouping contestGrouping = new ContestGrouping("ALL", League.NFL);
        Ebean.save(contestGrouping);

        ContestSalary contestSalary = new ContestSalary(League.NFL, 60000);
        Ebean.save(contestSalary);

        /*
         * Filter settings for MLB.
         */
        ContestEntryFee contestEntryFeeMLB = new ContestEntryFee(League.MLB, 200);
        Ebean.save(contestEntryFeeMLB);

        ContestNumberOfUsers contestNumberOfUsersMLB = new ContestNumberOfUsers(League.MLB, 0, 1000);
        Ebean.save(contestNumberOfUsersMLB);

        ContestGrouping contestGroupingMLB = new ContestGrouping("EARLY", League.MLB);
        Ebean.save(contestGroupingMLB);

        ContestSalary contestSalaryMLB = new ContestSalary(League.MLB, 50000);
        Ebean.save(contestSalaryMLB);

        League.MLB.setActive(false);
        Ebean.save(League.MLB);

        List<ContestFilter> contestFilters = contestFilterManager.generateFilters();
        assertTrue(contestFilters.size() == 2);

        ContestFilter filter = contestFilters.get(0);
        assertTrue(filter.getEntryFee().size() == 1 && filter.getEntryFee().get(0) == 100);
        assertTrue(filter.getGrouping().size() == 1 && filter.getGrouping().get(0).getName().equals("ALL"));
        assertTrue(filter.getNumPlayers().size() == 1
                && filter.getNumPlayers().get(0).getMinimum() == 2 && filter.getNumPlayers().get(0).getMaximum() == 2);
        assertTrue(filter.getSalaryCap().size() == 1 && filter.getSalaryCap().get(0) == 60000);
        assertTrue(filter.getName().equals(ContestFilter.FILTER_TYPE_ALL));

        filter = contestFilters.get(1);
        assertTrue(filter.getEntryFee().size() == 1 && filter.getEntryFee().get(0) == 100);
        assertTrue(filter.getGrouping().size() == 1 && filter.getGrouping().get(0).getName().equals("ALL"));
        assertTrue(filter.getNumPlayers().size() == 1 && filter.getNumPlayers().get(0).getMinimum() == 2 && filter.getNumPlayers().get(0).getMaximum() == 2);
        assertTrue(filter.getSalaryCap().size() == 1 && filter.getSalaryCap().get(0) == 60000);
        assertTrue(filter.getName().equals("NFL"));
    }

    private void deleteAutoGeneratedContestFilterData() {
        List<ContestSalary> contestSalaries = Ebean.find(ContestSalary.class).findList();
        for(ContestSalary contestSalary: contestSalaries)
            Ebean.delete(contestSalary);

        List<ContestEntryFee> contestEntryFees = Ebean.find(ContestEntryFee.class).findList();
        for(ContestEntryFee contestEntryFee: contestEntryFees)
            Ebean.delete(contestEntryFee);

        List<ContestGrouping> contestGroupings = Ebean.find(ContestGrouping.class).findList();
        for(ContestGrouping contestGrouping: contestGroupings)
            Ebean.delete(contestGrouping);

        List<ContestNumberOfUsers> contestNumberOfUsersList = Ebean.find(ContestNumberOfUsers.class).findList();
        for(ContestNumberOfUsers contestNumberOfUsers: contestNumberOfUsersList)
            Ebean.delete(contestNumberOfUsers);
    }
}
